Warning: No GitHub token provided. API rate limits may apply.
Consider setting GITHUB_TOKEN environment variable or using --token

Latest review for PR #8 in NoahPeres/ti4-ai:

============================================================
GITHUB PR REVIEW SUMMARY
============================================================
Reviewer: coderabbitai[bot]
State: COMMENTED
Submitted: 2025-09-20T01:45:19Z
Review ID: 3247911025

REVIEW BODY:
----------------------------------------
**Actionable comments posted: 0**

<details>
<summary>‚ôªÔ∏è Duplicate comments (1)</summary><blockquote>

<details>
<summary>src/ti4/core/unit_stats.py (1)</summary><blockquote>

`205-226`: **Missing has_production propagation; also clamp additive fields >= 0.**

Mods flipping production won‚Äôt apply; negative dice/movement possible.



```diff
         return UnitStats(
             # Fundamental properties
-            cost=base.cost + modifications.cost,
+            cost=base.cost + modifications.cost,
             combat_value=modifications.combat_value
             if modifications.combat_value is not None
             else base.combat_value,
-            combat_dice=base.combat_dice + modifications.combat_dice,
-            movement=base.movement + modifications.movement,
+            combat_dice=max(0, base.combat_dice + modifications.combat_dice),
+            movement=max(0, base.movement + modifications.movement),
             capacity=base.capacity + modifications.capacity,
             production=base.production + modifications.production,
             # Unit abilities
             sustain_damage=base.sustain_damage or modifications.sustain_damage,
             anti_fighter_barrage=base.anti_fighter_barrage
             or modifications.anti_fighter_barrage,
             bombardment=base.bombardment or modifications.bombardment,
             deploy=base.deploy or modifications.deploy,
             planetary_shield=base.planetary_shield or modifications.planetary_shield,
             space_cannon=base.space_cannon or modifications.space_cannon,
             space_cannon_value=modifications.space_cannon_value
             if modifications.space_cannon_value is not None
             else base.space_cannon_value,
-            space_cannon_dice=base.space_cannon_dice + modifications.space_cannon_dice,
+            space_cannon_dice=max(0, base.space_cannon_dice + modifications.space_cannon_dice),
+            has_production=base.has_production or modifications.has_production,
         )
```

</blockquote></details>

</blockquote></details>

<details>
<summary>üßπ Nitpick comments (28)</summary><blockquote>

<details>
<summary>.trae/lrr_analysis/78_space_combat.md (4)</summary><blockquote>

`5-5`: **Add a language to fenced LRR block to satisfy markdownlint (MD040).**
Use a neutral language tag.

```diff
-```
+```text
...
-```
+``` 
```


Also applies to: 56-56

---

`12-12`: **Replace hard tabs with spaces (MD010).**
Tabs render inconsistently across viewers.



Also applies to: 18-18, 20-20, 23-23, 25-25, 30-30, 32-32, 42-42, 44-44, 50-50

---

`22-29`: **Attacker retreat policy: align doc with code/tests.**
Doc implies only defender retreats; LRR excerpt suggests both may (attacker blocked if defender already announced). Make the stance explicit and consistent with implementation/tests.

---

`41-46`: **Document eligibility checks for retreat.**
Spell out adjacency/ownership/no‚Äëenemy constraints here if implementation enforces them, or mark as a current limitation.

</blockquote></details>
<details>
<summary>scripts/fetch_pr_review.py (4)</summary><blockquote>

`40-41`: **_make_request type is too narrow; it returns lists for collection endpoints.**
Loosen the return type to handle both dict and list.

```diff
-    def _make_request(self, url: str) -> Dict[str, Any]:
+    def _make_request(self, url: str) -> Any:
         """Make a request to the GitHub API."""
```

---

`51-54`: **Add a network timeout to avoid hanging.**
Small safety net for CI/CLI.

```diff
-            with urlopen(request) as response:
+            with urlopen(request, timeout=15) as response:
                 return json.loads(response.read().decode('utf-8'))
```

---

`74-75`: **Paginate or request more items for reviews.**
Default per_page=30 can miss older reviews; add per_page and (optionally) pagination later.

```diff
-        url = f"{self.base_url}/repos/{self.repo}/pulls/{pr_number}/reviews"
+        url = f"{self.base_url}/repos/{self.repo}/pulls/{pr_number}/reviews?per_page=100"
         return self._make_request(url)
```

---

`91-93`: **Sort fallback for missing submitted_at.**
Some reviews may lack submitted_at; use created_at as a fallback.

```diff
-        reviews.sort(key=lambda x: x.get('submitted_at', ''), reverse=True)
+        reviews.sort(
+            key=lambda x: x.get('submitted_at') or x.get('created_at') or '',
+            reverse=True
+        )
```

</blockquote></details>
<details>
<summary>scripts/example_usage.md (1)</summary><blockquote>

`55-55`: **Add language to ‚ÄúSample Output‚Äù code fence (MD040).**

```diff
-```
+```text
```

</blockquote></details>
<details>
<summary>.trae/lrr_analysis/18_combat.md (4)</summary><blockquote>

`11-11`: **Add language to fenced LRR block (MD040).**

```diff
-```
+```text
...
-```
+``` 
```


Also applies to: 17-17

---

`12-12`: **Replace hard tab with spaces (MD010).**

---

`41-45`: **Clarify burst‚Äëicon vs combat_dice source of dice.**
Currently reads as ‚Äúvisual only‚Äù yet 18.2 says each icon adds a die. Define whether combat_dice already includes burst icons or how icons modify dice.

---

`75-77`: **Replace placeholder dates with actuals.**
For auditability.

</blockquote></details>
<details>
<summary>latest_review.md (1)</summary><blockquote>

`836-836`: **Add a language to fenced prompt/code blocks (MD040).**
Use text for prompts to silence lint.

```diff
-```
+```text
```


Also applies to: 953-953, 1032-1032, 1106-1106, 1183-1183

</blockquote></details>
<details>
<summary>tests/test_unit.py (2)</summary><blockquote>

`136-139`: **Also assert SPACE_DOCK has_production flag is True.**
Reflects new boolean capability while keeping base production at 0.

```diff
         space_dock = Unit(unit_type=UnitType.SPACE_DOCK, owner="player1")
+        assert space_dock.has_production() is True
         assert space_dock.get_production() == 0  # Base production is 0, actual production is planet resources + 2
```

---

`207-208`: **Optional: Add a dedicated test for has_production semantics.**
Keeps ‚Äústatic abilities‚Äù list clean while validating capability.

```python
def test_space_dock_has_production_flag() -> None:
    sd = Unit(unit_type=UnitType.SPACE_DOCK, owner="player1")
    assert sd.has_production() is True
    assert sd.get_production() == 0
```

</blockquote></details>
<details>
<summary>.trae/lrr_analysis/05_active_system.md (1)</summary><blockquote>

`32-37`: **Clarify cross-token rule in one sentence.**

Add a concise note: ‚ÄúPresence of another player‚Äôs command token does not prevent activation; only your own token does.‚Äù

</blockquote></details>
<details>
<summary>src/ti4/core/unit_stats.py (2)</summary><blockquote>

`35-35`: **Default for space_cannon_dice should be 0 (modifier safety).**

Using 1 causes +1 dice when a modifier intends ‚Äúno change.‚Äù

Apply:

```diff
-    space_cannon_dice: int = 1
+    space_cannon_dice: int = 0
```

---

`175-179`: **Use exception chaining (B904) and remove trailing whitespace.**

Complies with flake8-bugbear and keeps traceback clear.


```diff
-        try:
-            unit_type_enum = UnitType(unit_type)
-        except ValueError:
-            raise ValueError(f"Unknown unit type: {unit_type}")
-            
+        try:
+            unit_type_enum = UnitType(unit_type)
+        except ValueError as err:
+            raise ValueError(f"Unknown unit type: {unit_type}") from err
```

</blockquote></details>
<details>
<summary>IMPLEMENTATION_ROADMAP.md (2)</summary><blockquote>

`8-8`: **Fix heading level increment (MD001).**

Change to H2 to avoid skipping levels.


```diff
-### üéØ Next Target: 25% (Advanced Game Mechanics)
+## üéØ Next Target: 25% (Advanced Game Mechanics)
```

---

`4-12`: **Avoid duplicate ‚ÄúOverall Progress‚Äù blocks.**

You show 24.9% twice (Lines 4 and 11). Keep one.

</blockquote></details>
<details>
<summary>unit_stats_fixes_summary.md (1)</summary><blockquote>

`56-64`: **Also note default for space_cannon_dice.**

Document that UnitStats.default(space_cannon_dice)=0 so modifiers don‚Äôt add dice unintentionally.

</blockquote></details>
<details>
<summary>src/ti4/core/space_combat.py (6)</summary><blockquote>

`63-66`: **Guard attacker_announces_retreat() with policy.**

Prevent accidental enabling when base rules disallow it.


```diff
 def attacker_announces_retreat(self) -> None:
     """Attacker announces retreat."""
-    self.attacker_announced_retreat = True
+    if not self.can_attacker_announce_retreat():
+        raise RuntimeError("Attacker retreat is disabled under base rules")
+    self.attacker_announced_retreat = True
```

---

`74-93`: **Retreat: tolerate desync between round lists and system.**

Avoid ValueError if unit already moved/removed by callers.


```diff
-                # Move between systems
-                self.system.remove_unit_from_space(unit)
+                # Move between systems (guard against desync)
+                if unit in self.system.space_units:
+                    self.system.remove_unit_from_space(unit)
                 retreat_system.place_unit_in_space(unit)
@@
-                self.system.remove_unit_from_space(unit)
+                if unit in self.system.space_units:
+                    self.system.remove_unit_from_space(unit)
                 retreat_system.place_unit_in_space(unit)
```

---

`141-159`: **Filter to ships at combat start.**

Space combat should consider ships only; prevents accidental inclusion of non-ship units.


```diff
-        attacker_units = [
-            u for u in self.system.space_units if u.owner == self.attacker_id
-        ]
-        defender_units = [
-            u for u in self.system.space_units if u.owner == self.defender_id
-        ]
+        attacker_units = [
+            u for u in self.system.space_units
+            if u.owner == self.attacker_id and self._is_ship(u)
+        ]
+        defender_units = [
+            u for u in self.system.space_units
+            if u.owner == self.defender_id and self._is_ship(u)
+        ]
```

---

`161-175`: **Continuation check should align with ship presence.**

Match is_combat_required semantics.


```diff
-        attacker_units = [
-            u for u in self.system.space_units if u.owner == self.attacker_id
-        ]
-        defender_units = [
-            u for u in self.system.space_units if u.owner == self.defender_id
-        ]
+        attacker_units = [
+            u for u in self.system.space_units
+            if u.owner == self.attacker_id and self._is_ship(u)
+        ]
+        defender_units = [
+            u for u in self.system.space_units
+            if u.owner == self.defender_id and self._is_ship(u)
+        ]
```

---

`176-194`: **Next round: also restrict to ships.**

Keep unit lists consistent across rounds.


```diff
-        attacker_units = [
-            u for u in self.system.space_units if u.owner == self.attacker_id
-        ]
-        defender_units = [
-            u for u in self.system.space_units if u.owner == self.defender_id
-        ]
+        attacker_units = [
+            u for u in self.system.space_units
+            if u.owner == self.attacker_id and self._is_ship(u)
+        ]
+        defender_units = [
+            u for u in self.system.space_units
+            if u.owner == self.defender_id and self._is_ship(u)
+        ]
```

---

`196-234`: **Unused winner parameter.**

Either remove it or honor an explicit override.


```diff
-def end_combat(self, winner: Optional[str] = None) -> SpaceCombatResult:
+def end_combat(self) -> SpaceCombatResult:
```

</blockquote></details>

</blockquote></details>

<details>
<summary>üìú Review details</summary>

**Configuration used**: CodeRabbit UI

**Review profile**: CHILL

**Plan**: Pro

<details>
<summary>üì• Commits</summary>

Reviewing files that changed from the base of the PR and between 2f73104c82f8a049b00c73681a5b0cf2fd585164 and ff663cc5188b7bab9240ede5e854f086e3bf2a54.

</details>

<details>
<summary>üìí Files selected for processing (17)</summary>

* `.trae/lrr_analysis/05_active_system.md` (1 hunks)
* `.trae/lrr_analysis/18_combat.md` (1 hunks)
* `.trae/lrr_analysis/78_space_combat.md` (1 hunks)
* `IMPLEMENTATION_ROADMAP.md` (3 hunks)
* `latest_review.md` (1 hunks)
* `review_response.md` (1 hunks)
* `scripts/example_usage.md` (1 hunks)
* `scripts/fetch_pr_review.py` (1 hunks)
* `src/ti4/core/combat.py` (3 hunks)
* `src/ti4/core/rule89_validator.py` (1 hunks)
* `src/ti4/core/space_combat.py` (1 hunks)
* `src/ti4/core/unit.py` (1 hunks)
* `src/ti4/core/unit_stats.py` (4 hunks)
* `tests/test_rule_18_burst_icons.py` (1 hunks)
* `tests/test_rule_78_space_combat.py` (1 hunks)
* `tests/test_unit.py` (2 hunks)
* `unit_stats_fixes_summary.md` (1 hunks)

</details>

<details>
<summary>‚úÖ Files skipped from review due to trivial changes (1)</summary>

* review_response.md

</details>

<details>
<summary>üöß Files skipped from review as they are similar to previous changes (3)</summary>

* src/ti4/core/combat.py
* tests/test_rule_18_burst_icons.py
* tests/test_rule_78_space_combat.py

</details>

<details>
<summary>üß∞ Additional context used</summary>

<details>
<summary>üß¨ Code graph analysis (4)</summary>

<details>
<summary>src/ti4/core/rule89_validator.py (1)</summary><blockquote>

<details>
<summary>src/ti4/core/unit.py (1)</summary>

* `has_production` (113-115)

</details>

</blockquote></details>
<details>
<summary>src/ti4/core/unit_stats.py (2)</summary><blockquote>

<details>
<summary>src/ti4/core/unit.py (2)</summary>

* `sustain_damage` (134-138)
* `has_production` (113-115)

</details>
<details>
<summary>src/ti4/core/constants.py (1)</summary>

* `UnitType` (6-20)

</details>

</blockquote></details>
<details>
<summary>tests/test_unit.py (2)</summary><blockquote>

<details>
<summary>src/ti4/core/unit.py (2)</summary>

* `Unit` (10-191)
* `get_production` (117-119)

</details>
<details>
<summary>src/ti4/core/constants.py (1)</summary>

* `UnitType` (6-20)

</details>

</blockquote></details>
<details>
<summary>src/ti4/core/space_combat.py (3)</summary><blockquote>

<details>
<summary>src/ti4/core/constants.py (1)</summary>

* `UnitType` (6-20)

</details>
<details>
<summary>src/ti4/core/system.py (3)</summary>

* `System` (12-168)
* `remove_unit_from_space` (66-68)
* `place_unit_in_space` (62-64)

</details>
<details>
<summary>src/ti4/core/unit.py (4)</summary>

* `Unit` (10-191)
* `has_anti_fighter_barrage` (93-95)
* `get_combat_dice` (121-123)
* `get_combat_value` (73-75)

</details>

</blockquote></details>

</details><details>
<summary>ü™õ markdownlint-cli2 (0.18.1)</summary>

<details>
<summary>.trae/lrr_analysis/05_active_system.md</summary>

11-11: Fenced code blocks should have a language specified

(MD040, fenced-code-language)

---

12-12: Hard tabs
Column: 22

(MD010, no-hard-tabs)

</details>
<details>
<summary>IMPLEMENTATION_ROADMAP.md</summary>

8-8: Heading levels should only increment by one level at a time
Expected: h2; Actual: h3

(MD001, heading-increment)

</details>
<details>
<summary>latest_review.md</summary>

14-14: Trailing punctuation in heading
Punctuation: ':'

(MD026, no-trailing-punctuation)

---

16-16: Emphasis used instead of a heading

(MD036, no-emphasis-as-heading)

---

163-163: Strong style
Expected: asterisk; Actual: underscore

(MD050, strong-style)

---

163-163: Strong style
Expected: asterisk; Actual: underscore

(MD050, strong-style)

---

686-686: Trailing punctuation in heading
Punctuation: ':'

(MD026, no-trailing-punctuation)

---

836-836: Fenced code blocks should have a language specified

(MD040, fenced-code-language)

---

953-953: Fenced code blocks should have a language specified

(MD040, fenced-code-language)

---

1032-1032: Fenced code blocks should have a language specified

(MD040, fenced-code-language)

---

1106-1106: Fenced code blocks should have a language specified

(MD040, fenced-code-language)

---

1127-1127: Spaces inside emphasis markers

(MD037, no-space-in-emphasis)

---

1183-1183: Fenced code blocks should have a language specified

(MD040, fenced-code-language)

</details>
<details>
<summary>.trae/lrr_analysis/78_space_combat.md</summary>

5-5: Fenced code blocks should have a language specified

(MD040, fenced-code-language)

---

12-12: Hard tabs
Column: 2

(MD010, no-hard-tabs)

---

18-18: Hard tabs
Column: 2

(MD010, no-hard-tabs)

---

20-20: Hard tabs
Column: 2

(MD010, no-hard-tabs)

---

23-23: Hard tabs
Column: 2

(MD010, no-hard-tabs)

---

25-25: Hard tabs
Column: 2

(MD010, no-hard-tabs)

---

30-30: Hard tabs
Column: 2

(MD010, no-hard-tabs)

---

32-32: Hard tabs
Column: 2

(MD010, no-hard-tabs)

---

42-42: Hard tabs
Column: 2

(MD010, no-hard-tabs)

---

44-44: Hard tabs
Column: 2

(MD010, no-hard-tabs)

---

50-50: Hard tabs
Column: 2

(MD010, no-hard-tabs)

</details>
<details>
<summary>.trae/lrr_analysis/18_combat.md</summary>

11-11: Fenced code blocks should have a language specified

(MD040, fenced-code-language)

---

12-12: Hard tabs
Column: 22

(MD010, no-hard-tabs)

</details>
<details>
<summary>scripts/example_usage.md</summary>

55-55: Fenced code blocks should have a language specified

(MD040, fenced-code-language)

</details>

</details>
<details>
<summary>ü™õ GitHub Actions: CI</summary>

<details>
<summary>src/ti4/core/unit_stats.py</summary>

[error] 178-178: B904: Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling.

---

[warning] 179-179: W293: Blank line contains whitespace. Remove whitespace from blank line.

</details>

</details>

</details>

<details>
<summary>üîá Additional comments (6)</summary><blockquote>

<details>
<summary>src/ti4/core/unit.py (1)</summary><blockquote>

`113-116`: **Expose production capability via has_production(): LGTM.**
Matches UnitStats.has_production and decouples capability from numeric production.


Please confirm UnitStatsProvider always sets has_production for SPACE_DOCK (True) even if production=0.

</blockquote></details>
<details>
<summary>src/ti4/core/rule89_validator.py (1)</summary><blockquote>

`358-364`: **Switching to unit.has_production(): LGTM.**
Aligns with dynamic production semantics.


Ensure tests cover ‚Äúhas_production True, production 0‚Äù (SPACE_DOCK) and ‚Äúboth False/0‚Äù cases.

</blockquote></details>
<details>
<summary>.trae/lrr_analysis/05_active_system.md (1)</summary><blockquote>

`14-19`: **Own-token activation restriction: LGTM.**

Reads consistent with Rule 89. Please confirm tests explicitly cover: (a) own-token present ‚Üí cannot activate, (b) no own-token but other-player token present ‚Üí can activate.

</blockquote></details>
<details>
<summary>src/ti4/core/unit_stats.py (1)</summary><blockquote>

`119-133`: **Space Dock base stats: LGTM.**

cost=0, production=0, has_production=True aligns with rules and downstream checks.

</blockquote></details>
<details>
<summary>unit_stats_fixes_summary.md (1)</summary><blockquote>

`77-82`: **Metrics claims: verify against CI.**

‚Äú1037 tests pass / 87% coverage‚Äù ‚Äî ensure these reflect current pipeline to avoid drift.

</blockquote></details>
<details>
<summary>src/ti4/core/space_combat.py (1)</summary><blockquote>

`252-262`: **Ship whitelist: LGTM.**

Includes fighters; aligns with Rule 76 and space combat requirements.

</blockquote></details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->

============================================================
